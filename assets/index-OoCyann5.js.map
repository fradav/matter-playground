{"version":3,"file":"index-OoCyann5.js","sources":["../../galton.js","../../main.js"],"sourcesContent":["import Matter, { World } from \"matter-js\";\n\nimport statdists from '@stdlib/dist-stats-base-dists-flat';\nconst dists = statdists.base.dists;\nconst cdf = dists.normal.cdf;\n\nlet mu1 = -3; // mean of the first variable\nlet sigma1 = 0.6; // standard deviation of the first variable\nlet mu2 = 3; // mean of the second variable\nlet sigma2 = 1.3; // standard deviation of the second variable\nlet p = 0.5; // weight of the first distribution\n\nfunction bimodalCDF(x) {\n    let cdf1 = cdf(x, mu1, sigma1);\n    let cdf2 = cdf(x, mu2, sigma2);\n    return p * cdf1 + (1-p) * cdf2;\n}\n\nconst arrayRange = (start, stop, step) =>\n    Array.from(\n        { length: (stop - start) / step + 1 },\n        (value, index) => start + index * step\n    );\nconst x = arrayRange(-5, 5, 0.01);\nconst sigma = 1;\nconst mu = 0;\n\n\nfunction closest (num, arr) {\n    var curr = arr[0];\n    var diff = Math.abs (num - curr);\n    for (var val = 0; val < arr.length; val++) {\n        var newdiff = Math.abs (num - arr[val]);\n        if (newdiff < diff) {\n            diff = newdiff;\n            curr = arr[val];\n        }\n    }\n    return curr;\n}\nexport const Example = {};\nExample.galton = function () {\n    let Engine = Matter.Engine,\n        Render = Matter.Render,\n        Runner = Matter.Runner,\n        Events = Matter.Events,\n        Body = Matter.Body,\n        Detector = Matter.Detector,\n        Composite = Matter.Composite,\n        Composites = Matter.Composites,\n        Common = Matter.Common,\n        MouseConstraint = Matter.MouseConstraint,\n        Mouse = Matter.Mouse,\n        World = Matter.World,\n        Bodies = Matter.Bodies;\n    // create engine\n    let engine = Engine.create({\n        enableSleeping: false,\n        \n    }),\n    world = engine.world;\n    const width = 500;\n    const height = 500;\n    // create renderer\n    let render = Render.create({\n        element: document.body,\n        engine: engine,\n        options: {\n            width: width,\n            height: height,\n            wireframes: false\n        }\n    });\n    Render.run(render);\n    // create runner\n    let runner = Runner.create({\n        delta: 1000 / (60 * 10), // 600Hz delta = 1.666ms = 10upf @ 60fps (10x default precision)\n        maxFrameTime: 1000 / 20 // performance budget\n    });\n    Runner.run(runner, engine);\n    const discretize = (x) => Math.trunc(x / size) * size;\n\n    const shootheightmax = 20;\n    const shootheightmin = height / 2;\n    const shootheight = shootheightmin - shootheightmax;\n\n    const size = 4;\n    let total = 1000;\n    const speed = 10;\n\n    // const size = 20;\n    // let total = 20;\n    // const speed = 5;\n\n\n    const plotPixel = (x, y, brightness) => {\n        World.add(world, Bodies.rectangle(x,y,1,1, {\n            isStatic: true,\n            render: {\n                fillStyle: \"#ffffff\",\n                visible: true,\n                opacity: brightness\n            },\n            collisionFilter: {\n                group: 0,\n            }\n        }));\n    };\n\n    function plot(ipart, round, fpart, rfpart, x, y, x2, y2) {\n    \n        const steep = Math.abs(y2 - y) > Math.abs(x2 - x);\n        if (steep) {\n            [x, y] = [y, x];\n            [x2, y2] = [y2, x2];\n        }\n        if (x > x2) {\n            [x, x2] = [x2, x];\n            [y, y2] = [y2, y];\n        }\n    \n        const dx = x2 - x;\n        const dy = y2 - y;\n        const gradient = dy / dx;\n    \n        let intery = y + rfpart(x) * gradient;\n        for (let xi = ipart(x) + 1; xi < round(x2); xi++) {\n            if (steep) {\n                plotPixel(ipart(intery), xi, rfpart(intery));\n                plotPixel(ipart(intery) + 1, xi, fpart(intery));\n            } else {\n                plotPixel(xi, ipart(intery), rfpart(intery));\n                plotPixel(xi, ipart(intery) + 1, fpart(intery));\n            }\n            intery += gradient;\n        }\n    }\n    \n    function drawLine(x1, y1, x2, y2) {\n        const ipart = Math.floor;\n        const round = Math.round;\n        const fpart = x => x - Math.floor(x);\n        const rfpart = x => 1 - fpart(x);\n    \n        plot(ipart, round, fpart, rfpart, x1, y1, x2, y2);\n        plot(ipart, round, fpart, rfpart, x2, y2, x1, y1);\n        plotPixel(x1, y1, 1);\n        plotPixel(x2, y2, 1);\n    }\n    // const size = 10;\n    // let total = 20;\n    // const speed = 5;\n\n    const distribution = 'laplace';\n    engine.gravity.y = 0;\n    \n    let pegxf = {};\n    let pegx = {};\n    let pegy = [];\n    let miny = Infinity;\n    let maxy = 0;\n    for (let i = 0; i < width/size; i++) {\n        const x = i * size;\n        // const cdf = dists[distribution].cdf((x - width/2)/40, mu, sigma);\n        const cdf = bimodalCDF((x - width/2)/40);\n        let y = shootheightmin - cdf * shootheight;\n\n        pegx[y] = x;\n        if (y < miny) {\n            miny = y;\n        }\n        if (y > maxy) {\n            maxy = y;\n        }\n        pegy.push(y);\n\n    }\n\n    for (let i = 0; i < width/size; i++) {\n        const x = i * size;\n        const y = (maxy - pegy[i]) *  (shootheightmax - shootheightmin) / (maxy - miny) + shootheightmin;\n        const peg = Bodies.rectangle(x, y, size, size, {\n            isSensor: true,\n            isStatic: true,\n            render: {\n                fillStyle: \"#ff00ff\",\n                visible: false\n            },\n            collisionFilter: {\n                group: 0,\n            }\n        });\n        pegy[i] = y;\n        pegx[y] = x;\n        World.add(world, peg);\n        if (i > 0) {\n            drawLine(pegx[pegy[i-1]], pegy[i-1], pegx[pegy[i]], pegy[i]);\n        }\n    }\n    \n    let shoots = {};\n    Events.on(runner,  'beforeTick', function(event) {\n        // loop through all moving bodies with velocity x > 0\n        for (let i = 0; i < world.bodies.length; i++) {\n            const body = world.bodies[i];\n            if (body.velocity.x > 0 && !body.isStatic) {\n                const x = body.position.x;\n                const y = body.position.y;\n                const pegcx = shoots[body.id];\n                if (x >= pegcx) {\n                    Body.setPosition(body, { x: pegcx, y: y });\n                    Body.setVelocity(body, { x: 0, y: speed });\n                }\n            }\n        }\n        // loop through all moving bodies with velocity y > 0 and stack them on the floor\n        for (let i = 0; i < world.bodies.length; i++) {\n            const body = world.bodies[i];\n            if (body.velocity.y > 0 && !body.isStatic) {\n                const x = body.position.x;\n                const y = body.position.y;\n                // verify that the x position is already registered\n                if ((pegxf[x] && (y >= height - pegxf[x] - size/2)) || y >= (height - size/2)) {\n                    if (!pegxf[x]) {\n                        pegxf[x] = size / 2;\n                    } \n                    Body.setPosition(body, { x: x, y: height - pegxf[x]});\n                    Body.setStatic(body, true);\n                    pegxf[x] += size;\n                }\n            }\n        }\n    });\n\n    setInterval(() => {\n        if (total-- > 0) {\n            const unifm1p1 = Math.random();\n            const unidisc = unifm1p1 * (maxy - miny) + miny;\n\n            const square = Bodies.rectangle(\n                10, unidisc\n                , size, size, {\n                isSensor: true,\n                frictionAir: 0,\n                render: {\n                    fillStyle: \"#ff00ff\",\n                    visible: true\n                },\n                collisionFilter: {\n                    group: 0,\n                },\n            });\n            square.id = \"square\" + total;\n            shoots[square.id] = pegx[closest(unidisc, pegy)];\n            Body.setVelocity(square, { x: speed, y: 0 });\n            World.add(world, square);\n        }\n    });\n\n\n    return {\n        engine: engine,\n        runner: runner,\n        render: render,\n        canvas: render.canvas,\n        stop: function () {\n            Matter.Render.stop(render);\n            Matter.Runner.stop(runner);\n        }\n    };\n};\n","import MatterTools from \"matter-tools\";\nimport { Example } from \"./galton.js\";\n\nMatterTools.Demo.create({\n  fullPage: true,\n  preventZoom: true,\n  startExample: true,\n  appendTo: document.body,\n\n  toolbar: {\n    title: 'matter-tools',\n    url: 'https://github.com/liabru/matter-tools',\n    reset: true,\n    source: true,\n    inspector: true,\n    tools: true,\n    fullscreen: true,\n    exampleSelect: true\n  },\n\n  tools: {\n    inspector: true,\n    gui: true\n  },\n  \n  examples: [\n    {\n      name: 'Galton Board',\n      id: 'galton',\n      init: Example.galton,\n      sourceLink: './galton.js'\n    }]\n});\n\n"],"names":["dists","statdists","cdf","mu1","sigma1","mu2","sigma2","p","bimodalCDF","x","cdf1","cdf2","arrayRange","start","stop","step","value","index","closest","num","arr","curr","diff","val","newdiff","Example","Engine","Matter","Render","Runner","Events","Body","World","Bodies","engine","world","width","height","render","runner","shootheightmax","shootheightmin","shootheight","size","total","speed","plotPixel","y","brightness","plot","ipart","round","fpart","rfpart","x2","y2","steep","dx","gradient","intery","xi","drawLine","x1","y1","pegxf","pegx","pegy","miny","maxy","i","peg","shoots","event","body","pegcx","unidisc","square","MatterTools"],"mappings":"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"}